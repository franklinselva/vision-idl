/*/
 * Copyright (c) 2019 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                                  Martin Jacquet - June 2020
 */
#ifndef OR_CALIB
#define OR_CALIB

module or {
    module sensor {

        /* ---- Camera calibration -------------------------------------------- */

        // Intrinsic calibration (geometry and distortion)
        struct calibration {
            float fx, fy, cx, cy, gamma;
        };
        struct distortion {
            float k1, k2, k3, p1, p2;
        };
        struct intrinsics {
            calibration calib;
            distortion  disto;
        };

        // Extrinsic transformation from body to camera frame
        struct rotation {
            float roll, pitch, yaw;
        };
        struct translation {
            float tx, ty, tz;
        };
        struct extrinsics {
            rotation    rot;
            translation trans;
        };

    };
};

#endif /* OR_CALIB */
